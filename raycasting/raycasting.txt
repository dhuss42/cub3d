
- Look up basic trigonometry


floats
    less digits precision than doubles
    but better for graphical projects

When testing the program
    make minimap one half of the screen
    and actual drawing the other half

Minimap
    initialise window
    create an image
    draw pixels on the image according to 1 0 etc 
        N S W E
            is players starting direction
        64 pixels in size
        add or subtract one pixel while drawing so there are outlines
    keep window open with hook
player
    draw player
    make player movable in four directions
    hinder player from going in to walls
    make player rotatable (a left; d right)
        - (math lib)
            sin, cos,
            #define the value of pi
        - store player positions
            px, py, pdeltax, pdeltay, pangle
        - when looking left (a) subtract a small amount from player's pagnle (pangle -= 0.1)
            - because in C sin and cos use radian values 
                - instead 0 to 360Â°
                - 0 to 2pi (6.28) 
            - if we go beneath 0 reset to 2pi
                - if pangle < 0
                    {pa = 2pi}
            - pdeltax = cos(pangle) * 5
            - pdeltay = sin(pangle) * 5
            - return values of cos and sin are small so multiply by 5
        - when looking right add a small amount to pangle
            if we go above 2pi reset to 0
            - pdeltax = cos(pangle) * 5
            - pdeltay = sin(pangle) * 5
    - adjust movement so w is forward and s is backwards
        -w: px (current player_x position) += pdeltax (same with py and pdeltay)
        -s: same but subtract
        -draw the direction the player is looking to
            - calculate pdeltax and pdeltay when program first runs
                - pdeltax = cos(pangle) * 5
                - pdeltay = sin(pangle) * 5

vectors
    a struct containing two floats x and y
    perpendicular vector is identical except one value is negative

raycasting basics
    position of player is a vector (x and y coordinate)
        - is a single point
        - is in front of the camera plane
    direction of player is a vector
    camera plane is a perpendicular vector to direction (represents the surface of the computer screen)
    rays travel from player through camera plane
        - direction of the ray is dir + plane (where the plane was crossed)
    Field of Vision (FOV)
        - left and right boarder of the screen
        - angle between those lines is the field of vision
        - is deteremined by the ratio of the length of the direction vector
            and the length of the camera plane
    Rotation
        - when the player rotates, the direction vector and the plane vector have to rotate too
        - rotating vector
            cos(a) -sin(a)
            sin(a) cos(a)

    check every side of a wall the ray will encounter

    DDA (Digital Differntial Analysis)
        a fast algorithm used on quare grids to find which square a line hits


    #define 1 degree in radians 

Untextured Raycaster

    #define screen Width and Height

    position of player (posX and posY)
        determined by position on map
    direction of player (dirX and dirY)
        determined by NSEW
    camera plane (planeX and planeY)
        planeX = 0, planeY 0.66 (optimal for FPS)

    store the the time of current and previous frame, can be used to determine 
        how much you should move when a certain key is pressed
    Time = 0
    oldTime

    - Create a screen
    - Raycasting Loop
        - ray starts and position of player (posX, posY)
        - cameraX is a coordinate of the camera plane
                - right side of the screen will be 1
                - center is 0
                - left is -1
            - this way the direction of the ray can be calculated
                - sum of direction vector + a part of the plane vector
                - has to be done for both x and y coordinate
                    - rayDirX = dirX + planeX * cameraX;
                    - same for y
            Formula:
                cameraX = 2 * x / width -1

                -w represents the amount of vertical stripes (pixels) on the screen
                    - therefore how many rays are beeing cast

        - mapX and mapY represent the current square the ray is in (index)
            posX; posY
            -> meaning if mapX = 3, the cell ranges from x = 3.0 (left edge) to x = 4.0 (right edge)
                same for y
        - sideDistX and Y are initially the distance the ray has to travel
            from its start position to the first x-side and first y-side
        - deltaDistX and Y are the distance the ray has to travel from one x-side to the next x-side
            same for y
            - calculate deltaDistX with Pythagoras
                for the triangle, one side has length 1 (one cell)
                the other side has length raydirY/raydirX 
                    (exactly the amount of units the ray goes in the y-direction when taking 1-step in the X-direction)
            deltaDistX = sqrt(1 + (rayDirY * rayDirY) / (rayDirX * rayDirX))
            deltaDistY = sqrt(1 + (rayDirX * rayDirX) / (rayDirY * rayDirY)) 
            -> possible to further simplify but I don't understand the maths involved
        - step_x / step_y has the ray gone in a positive or negative direction
            either -1 or +1 
        - hit, was a wall hit?
        - side (was a NS or a EW wall hit)

        inital sideDistX and Y have to be calculated  
            -if it has a negative x component sideDistX is the distance from the ray starting position
            to the first side to the left
            - if it has a positive x component it is the first side to right
            - same for y position but it is top and bottom 
        also step_x and step_y
            if the ray has a negative x-component step_x is -1
            if positive +1
            same for Y

        -> if (rayDirX < 0)
        {
            step_x = -1;
            sideDistX = (posX - mapX) * deltaDistX;
        }
            -> multiplying by deltaDistX accounts for the slope
             (not 100% understood)
        else
        {
            step_x = 1;
            sideDistX = (mapX + 1.0 - posX) * deltaDistX;
        }

        DDA
            - Loop while (hit == 0)
            - increment the ray by 1 square until a wall is hit
            - goes either a square in X with step_x or Y

            - check what is larger sideDistX or sideDistY
                if (sideDistX > sideDistY)
                    - then we are moving in the Y direction
                    - add deltaDistY to sideDistY as deltaDistY is exactly one cell in the y-direction
                    - increment mapY accordingly with step_y
                    - side = 1
                        stores information on which wall will be hit (1 = NS)
                    - Check if ray has hit a wall
                        if Map[mapX][mapY] = 1 then set hit = 1;
            
        Calculate Ray to wall distance
            - use distance to camera plane not player
            - perpWallDist (don't quite understand)
                if(side == 0)
                    perpWallDist = (sideDistX - deltaDistX);
                else 
                    perpWallDist = (sideDistY - deltaDistY);

        Calculate line hight to be drawn
            - inverse (Kehrwert) of perpWallDist multiplied by h (height in pixels of the screen)
                -> 1 / perpWallDist
                -> this is done because things that are closer appear larger and vice versa (Umgekehrt proportional)
                    -> 1 / 3 needs to be drawn larger than
                    -> 1 / 8
            - then 


collision
    detect if next square is wall
key hold