- 2D array as screen buffer
	stores pixel colours for entire screen
- additional array for textures
	go through array and initialise texture width and height for every index

1.	load images into texture array
- float wall_x
	where the wall was exactly hit on the texture x-axis
	check if vertical wall
		wall_x = pos_y + wall_to_plane *raydir_y
	or horizontal wall
		same but with x values

		this calculates the position the ray hits a wall on the entire map grid
			example = the wall is hit at 2.75 between x=2 and x=3

2.	getting the x-coordinate on wall and texture
- int tex_x
	-> now subtract the integer part (2) from the fractional part (0.75)
		- used with tex_x -= floor(wall_x)
		now we know the exact position of where the ray hit the wall

	-> now scale it with the width of the texture
		- gives exact position along the texture in proportion to where the ray hit the wall

	-> flipping the texture
		- check which side of the wall (horizontal/vertical)
		- check raydir
			if moves to the right flip horizontally

		if (side == 0 && rayDirX > 0)
			texX = texWidth - texX - 1;

		if (side == 1 && rayDirY < 0)
			texX = texWidth - texX - 1;

		- reverse the texture
			tex_x = tex_width - tex_x -1 (-1 for starting at 0)
				- when tex_x = 50 (meaning the ray hits the wall at column 51)
					-> 255 - 50 = 205

3.	looping through y-coordinates
- step = 1.0 * tex_height / line_height
	-> tells us how much to increase the texture y-coordinate as we move down the vertical screen pixel
- tex_pos = (draw_start - h / 2 + line_height / 2) * step
	- draw_start
		starting vertical position where the wall begins
	- h / 2
		the center of the screen
	- line_height / 2
		half of the height of the wall (?)

	y = draw_start
	while (y < draw_end)
		tex_y = (int)tex_pos & (tex_height -1);
		tex_pos += step;

	tex_pos = y-coordinate of the texture that corresonds to the current vertical screen pixel pos_y
	tex_y = tex_pos cast to an int to obtain the y-coordinate of the texture
		(int)texPos & (texHeight - 1) // I don't understand this bit operation

